using System;
using System.Globalization;
using Xunit;

namespace Euler
{
    /// <summary>
    /// Highly divisible triangular number
    /// 
    /// The sequence of triangle numbers is generated by adding the natural numbers.
    /// So the 7**th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
    /// The first ten terms would be:
    /// 
    /// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    /// 
    /// Let us list the factors of the first seven triangle numbers:
    /// 
    ///  1: 1
    ///  3: 1, 3
    ///  6: 1, 2, 3, 6
    /// 10: 1, 2, 5,10
    /// 15: 1, 3, 5,15
    /// 21: 1, 3, 7,21
    /// 28: 1, 2, 4, 7,14,28
    /// 
    /// We can see that 28 is the first triangle number to have over five divisors.
    /// 
    /// What is the value of the first triangle number to have over five hundred divisors?
    ///
    /// <seealso href="https://projecteuler.net/problem=12"/>
    /// </summary>
    public sealed class Problem012
    {            
        private const string Answer = @"76576500";
                
        [Fact]
        public void Test()
        {
            var actual = GetAnswer();
            Assert.Equal(Answer, actual);
        }        

		[Fact]
        public void WellKnownTest()
        {
            var actual = GetAnswer(5);
            Assert.Equal("28", actual);
        }

        public static string GetAnswer(int divCount = 500)
        {
            var getDivCount = new Func<int, int>(number =>
            {              
                var counter = 2;
                for (var i = 2; i <= (number >> 1); i++)
                {
                    if ((number % i) == 0)
                        counter++;
                }
                return counter;
            });

            var n = 1;
            for (var i = 2; i < int.MaxValue; i++)
            {
                n = n + i;
                if (getDivCount(n) > divCount)
                {
                    return n.ToString(CultureInfo.InvariantCulture);
                }
            }

            throw new AnswerNotFoundException();
        }
    }
}
